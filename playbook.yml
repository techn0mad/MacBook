---
- name: MacBook provisioning
  hosts: all

  vars:
    uninstall_brew: false
    brew_packages:
      - 'gpg'
      - 'pass'
      - 'wget'
      - 'jq'
      - 'git'
      - 'awscli'
      - 'gh'
      - 'python'
      - 'sshpass'
      - 'mactex'
      - 'ruby'
      - 'dockutil'

  handlers:
    - name: Reboot system
      ansible.builtin.reboot:

  tasks:
    - name: Check for SSH keys
      ansible.builtin.stat:
        path: './.ssh/id_rsa'
      register: r_ssh_rsa_key

    - name: Generate SSH keys
      community.crypto.openssh_keypair:
        path: './.ssh/id_rsa'
        size: 4096
        comment: "{{ lookup('ansible.builtin.env', 'USER') }}@{{ ansible_fqdn }}"
        mode: '0600'
      when:
        - r_ssh_rsa_key.stat.isreg is not defined

    - name: Configure Homebrew vars for ARM
      ansible.builtin.set_fact:
        brew_bin: '/opt/homebrew/bin/brew'
        brew_dir: '/opt/homebrew'
        cacheable: true
      when:
        - ansible_architecture == "arm64"

    - name: Configure Homebrew vars for x86_64
      ansible.builtin.set_fact:
        brew_bin: '/usr/local/bin/brew'
        brew_dir: '/usr/local'
        cacheable: true
      when:
        - ansible_architecture == "x86_64"

    - name: Uninstall Homebrew
      ansible.builtin.shell: |
        set -e -o pipefail
        /bin/bash -c "NONINTERACTIVE=1 $(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/uninstall.sh)"
        rm -frv /opt/homebrew/etc /opt/homebrew/share /opt/homebrew/var
      args:
        executable: '/bin/bash'
      when:
        - ansible_distribution == "MacOSX"
        - uninstall_brew

    - name: Check if Homebrew is installed
      ansible.builtin.stat:
        path: "{{ brew_bin }}"
      register: r_brew_bin

    - name: Install Homebrew
      ansible.builtin.shell: |
        set -e -o pipefail
        /bin/bash -c "NONINTERACTIVE=1 $(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
      args:
        executable: '/bin/bash'
      when:
        - ansible_distribution == "MacOSX"
        - r_brew_bin.stat.isreg is not defined

    - name: Setup Homebrew env vars for ARM
      ansible.builtin.blockinfile:
        path: './.zprofile'
        create: true
        append_newline: true
        prepend_newline: true
        block: |
          eval "$(/opt/homebrew/bin/brew shellenv)"
      when:
        - ansible_architecture == "arm64"
        - ansible_user_shell == "/bin/zsh"

    - name: Setup Homebrew env vars for x86_64
      ansible.builtin.blockinfile:
        path: './.profile'
        create: true
        append_newline: true
        prepend_newline: true
        block: |
          eval "$(/usr/local/bin/brew shellenv)"
      when:
        - ansible_architecture == "x86_64"
        - ansible_user_shell == "/bin/bash"

    - name: Install Homebrew packages
      community.general.homebrew:
        name: "{{ item }}"
        state: present
        update_homebrew: true
      loop: "{{ brew_packages }}"
      when:
        - ansible_distribution == "MacOSX"

    - name: Tap Hashicorp Brew Cask
      community.general.homebrew_tap:
        name: hashicorp/tap
      when:
        - ansible_distribution == "MacOSX"

    - name: Install Hashicorp Apps
      community.general.homebrew:
        name: "{{ item }}"
        state: present
      loop:
        - 'hashicorp/tap/vault'
        - 'hashicorp/tap/packer'
        - 'hashicorp/tap/terraform'
        - 'hashicorp/tap/hashicorp-vagrant'
      when:
        - ansible_distribution == "MacOSX"

    - name: Install Packages
      ansible.builtin.shell: |
        set -e -o pipefail
        eval "$({{ brew_bin }} shellenv)"  # Setup paths to Homebrew binaries
        rm -fR ./tmp/
        mkdir -p ./tmp/  # Create work area
        pushd ./tmp
        wget --quiet "{{ item.dmgURL }}"  # Download image
        IMG="$(basename "$(ls *.dmg)")"
        MOUNT="$(yes | PAGER=cat hdiutil attach -nobrowse "$(pwd)/${IMG}" | \
            tail -1 | awk -F'\t' '{ print $(NF) }' || true)"
        APPNAME="$(basename "$(ls -d "${MOUNT}"/*.app)")"
        if ! [ -d "/Applications/${APPNAME}" ]; then  # If app is not present
            cp -aR "${MOUNT}/${APPNAME}" /Applications/  # Copy application
        fi
        hdiutil detach "${MOUNT}"  # Detach image
        popd
        rm -R ./tmp/  # Delete workarea
      args:
        executable: '/bin/bash'
      loop:
        - { appName: 'Firefox', dmgURL: 'https://ftp.mozilla.org/pub/firefox/releases/121.0.1/mac/en-US/Firefox%20121.0.1.dmg' }
        - { appName: 'Emacs', dmgURL: 'https://emacsformacosx.com/emacs-builds/Emacs-29.2-universal.dmg' }
        - { appName: 'Slack', dmgURL: 'https://downloads.slack-edge.com/releases/macos/4.36.140/prod/universal/Slack-4.36.140-macOS.dmg' }
        - { appName: 'Freeplane', dmgURL: 'https://sourceforge.net/projects/freeplane/files/freeplane%20stable/Freeplane-1.11.10-intel.dmg' }
        - { appName: 'Squeak', dmgURL: 'https://files.squeak.org/6.0/Squeak6.0-22148-64bit/Squeak6.0-22148-64bit-202312181441-macOS.dmg' }
        - { appName: 'IPinmenubar', dmgURL: 'https://www.monkeybreadsoftware.de/Software/IPinmenubar.dmg' }
        - { appName: 'OmniGraffle', dmgURL: 'https://downloads.omnigroup.com/software/macOS/11/OmniGraffle-7.22.5.dmg' }
        - { appName: 'OmniDiskSweeper', dmgURL: 'https://downloads.omnigroup.com/software/macOS/11/OmniDiskSweeper-1.14.dmg' }
      when:
        - ansible_distribution == "MacOSX"
